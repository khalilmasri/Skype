r
q
r
q
q
r
n
n
q
q
b Webcam::capture() 
r
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
q
b Webcam::capture() 
r
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
n
p nb_frames 
p index
n
n
n
n
n
n
n
n
n
n
n
n
n
p index
n
n
n
n
n
n
n
n
n
n
n
n
n
p index
n
n
n
n
n
n
n
n
n
n
n
n
n
p index
n
n
n
n
n
n
p index
n
n
n
n
n
n
n
p index
n
n
n
n
n
n
n
n
n
bt
q
b AudioConverter::encode_frames(std::vector<unsigned char, std::allocator<unsigned char> >&, bool) 
b AudioConverter::decode_frames(std::unique_ptr<LockFreeAudioQueue, std::default_delete<LockFreeAudioQueue> >&) 
r
p m_valid
p m_codec_context
p m_awaiting
p m_encoder_context->sample_fmt
p m_encoder_context->code_id
p m_encoder_context->codec
p m_encoder_context->codec->name
p m_encoder_context->codec->sample_fmts[0]
p m_encoder_context->codec->sample_fmts[1]
p m_encoder_context->codec->sample_fmts[2]
p m_encoder_context->codec->sample_fmts[4]
p m_encoder_context->codec->sample_fmts[5]
p m_encoder_context->max_lowres
p m_encoder_context->codec->max_lowres 
p m_encoder_context->codec->max_lowres[0] 
p m_encoder_context->codec->capabilities 
p m_encoder_context->codec->type
n
n
n
n
n
continue
continue
continue
n
n
n
continue
q
b AudioConverter::decode_frames(std::unique_ptr<LockFreeAudioQueue, std::default_delete<LockFreeAudioQueue> >&) 
r
p m_decoder_context->sample_fmts
p m_decoder_context->sample_fmt 
p m_decoder_context->codec_id
p m_decoder_context->codec->name
p m_decoder_context->codec->type
p m_decoder_context->frame
p m_decoder_context->codec_id
p m_decoder_context->bit_rate
q
r
n
q
r
q
r
q
